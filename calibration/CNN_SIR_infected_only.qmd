---
title: "Implementing the CNN Model Just by Knowing the Infections Count to Find the Closest Parameters to Simulate SIR Models"
format: gfm
editor: visual
---

Load required libraries:

```{r}
#| label: Load required libraries
library(data.table)
library(parallel)
library(keras)
library(ggplot2)
library(reshape2)
library(tensorflow)
library(keras3)
```

# simulate data

`imulate_data` function performs a simulation for epidemiological modeling using the SIR (Susceptible-Infectious-Recovered) model across multiple iterations, to generate and save data for further analysis.

```{r}
#|label: Function to simulate data
simulate_data <- function(N = 2e4, n = 5000, ndays = 50, ncores = 20, seed = 1231, savefile = "calibration/sir.rds") {
  source("calibration/dataprep.R")
  
  set.seed(seed)
  
  theta <- data.table(
    preval = sample((100:2000)/n, N, TRUE),
    crate  = rgamma(N, 5, 1),    # Mean 5
    ptran  = rbeta(N, 3, 7),         # Mean 0.3
    prec   = rbeta(N, 10, 10*2 - 10) # Mean 0.5
  )
  
  theta[, hist(crate)]
  
  seeds <- sample.int(.Machine$integer.max, N, TRUE)
  
  matrices <- parallel::mclapply(1:N, FUN = function(i) {
    fn <- sprintf("calibration/simulated_data/sir-%06i.rds", i)
    
    if (file.exists(fn))
      return(readRDS(fn))
    
    set.seed(seeds[i])
    
    m <- theta[i,
               ModelSIRCONN(
                 "mycon",
                 prevalence        = preval,
                 contact_rate      = crate,
                 transmission_rate = ptran,
                 recovery_rate     = prec, 
                 n                 = n
               )
    ]
    
    # Avoids printing
    verbose_off(m)
    
    run(m, ndays = ndays)
    
    # Using prepare_data
    ans <- prepare_data(m)
    saveRDS(ans, fn)
    
    ans
  }, mc.cores = ncores)
  
  # Keeping only the non-null elements
  is_not_null <- intersect(
    which(!sapply(matrices, inherits, what = "error")),
    which(!sapply(matrices, function(x) any(is.na(x))))
  )
  matrices <- matrices[is_not_null]
  theta    <- theta[is_not_null,]
  
  N <- length(is_not_null)
  
  # Setting up the data for tensorflow
  arrays_1d <- array(dim = c(N, dim(matrices[[1]][1,,])))
  for (i in seq_along(matrices))
    arrays_1d[i,,] <- matrices[[i]][1,,]
  
  theta2 <- copy(theta)
  theta2[, crate := plogis(crate / 10)]
  
  # Saving the data 
  saveRDS(
    list(
      theta = theta2,
      simulations = arrays_1d
    ),
    file = savefile,
    compress = TRUE
  )
}
```

**Parameters**:

-   `N`: Number of simulations to run (default 20,000).

-   `n`: Population size for each simulation (default 5,000).

-   `ndays`: Number of days to run each simulation (default 50).

-   `ncores`: Number of CPU cores used for parallel processing (default 20).

-   `seed`: Random seed for reproducibility.

-   `savefile`: Path to save the final output.

# prepare training and testing data

This function prepares simulation data for training machine learning models. It splits the data into training and test sets based on the specified training fraction, reshapes the data, and returns it in a format ready for the CNN model.

```{r}
#| label: Function to prepare training and testing data
prepare_data_sets <- function(datafile = "calibration/sir.rds", train_fraction = 0.7) {
  sim_results <- readRDS(datafile)
  theta <- sim_results$theta
  arrays_1d <- sim_results$simulations
  
  # Extracting infections only
  arrays_1d <- arrays_1d[,1,,drop=FALSE]
  N     <- dim(arrays_1d)[1]
  
  # Reshaping
  N_train <- floor(N * train_fraction)
  id_train <- 1:N_train
  train <- list(
    x = array_reshape(
      arrays_1d[id_train,,], dim = c(N_train, dim(arrays_1d)[-1])
    ),
    y =  array_reshape(
      as.matrix(theta)[id_train,], dim = c(N_train, ncol(theta)))
  )
  
  N_test <- N - N_train
  id_test <- (N_train + 1):N
  
  test <- list(
    x = array_reshape(arrays_1d[id_test,,], dim = c(N_test, dim(arrays_1d)[-1])),
    y = array_reshape(as.matrix(theta)[id_test,], dim = c(N_test, ncol(theta)))
  )
  
  list(train = train, test = test, theta = theta, arrays_1d = arrays_1d, N = N, N_train = N_train, N_test = N_test)
}
```

# build and train the model

The `build_and_train_model` function builds, trains, and evaluates a convolutional neural network (CNN) model using the `keras3` and `tensorflow` R packages.

```{r}
#|label: Function to build and train the model
build_and_train_model <- function(train, test, arrays_1d, theta, N_train, seed = 331, save_model_file = "sir-keras_infections_only") {
  # Build the model
  model <- keras3::keras_model_sequential()
  model |>
    keras3::layer_conv_2d(
      filters     = 32,
      input_shape = c(dim(arrays_1d)[-1], 1),
      activation  = "linear",
      kernel_size = c(1, 5)
    ) |>
    keras3::layer_max_pooling_2d(
      pool_size = 2,
      padding = 'same'
    ) |>
    keras3::layer_flatten(
      input_shape = dim(arrays_1d)[-1]
    ) |>
    keras3::layer_dense(
      units = ncol(theta),
      activation = 'sigmoid'
    )
  
  # Compile the model
  model %>% compile(
    optimizer = 'adam',
    loss      = 'mse',
    metric    = 'accuracy'
  )
  
  # Running the model
  tensorflow::set_random_seed(seed)
  model |> fit(
    train$x,
    train$y,
    epochs = 10,
    verbose = 2
  )
  
  pred <- predict(model, x = test$x) |>
    as.data.table() |>
    setnames(colnames(theta))
  
  MAEs <- abs(pred - as.matrix(test$y)) |>
    colMeans() |>
    print()
  

  list(pred = pred, MAEs = MAEs)
}
```

### **Parameters**:

-   `train`: The training data, including inputs (`x`) and targets (`y`).

-   `test`: The test data for model evaluation.

-   `arrays_1d`: The 1D simulation data used to define the input shape for the model.

-   `theta`: The target variables from the simulations.

-   `N_train`: Number of training samples.

-   `seed`: A random seed for reproducibility (default: 331).

-   `save_model_file`: Filename to save the model (currently unused in the code).

# visualize results

The `visualize_results` function generates visualizations to compare predicted values from a trained model with the test dataset's observed (true) values.

```{r}
#|label: Function to visualize results
visualize_results <- function(pred, test, theta, MAEs, N, N_train, output_file = "calibration/sir_infections_only.png") {
  pred[, id := 1L:.N]
  pred[, crate := qlogis(crate)]
  pred_long <- melt(pred, id.vars = "id")
  
  theta_long <- test$y |> as.data.table()
  setnames(theta_long, names(theta))
  theta_long[, id := 1L:.N]
  theta_long[, crate := qlogis(crate)]
  theta_long <- melt(theta_long, id.vars = "id")
  
  alldat <- rbind(
    cbind(pred_long, Type = "Predicted"),
    cbind(theta_long, Type = "Observed")
  )
  
  p1<-ggplot(alldat, aes(x = value, colour = Type)) +
    facet_wrap(~variable, scales = "free") +
    geom_boxplot()
 print(p1) 
  alldat_wide <- dcast(alldat, id + variable ~ Type, value.var = "value")
  
  vnames <- data.table(
    variable = c("preval", "crate", "ptran", "prec"),
    Name     = paste(
      c("Init. state", "Contact Rate", "P(transmit)", "P(recover)"),
      sprintf("(MAE: %.2f)", MAEs)
    )
  )
  
  alldat_wide <- merge(alldat_wide, vnames, by = "variable")
  
  p2<-ggplot(alldat_wide, aes(x = Observed, y = Predicted)) +
    facet_wrap(~ Name, scales = "free") +
    geom_abline(slope = 1, intercept = 0) +
    geom_point(alpha = .2) +
    labs(
      title    = "Observed vs Predicted (validation set)",
      subtitle = sprintf(
        "The model includes %i simulated datasets, of which %i were used for training.",
        N,
        N_train
      ),
      caption  = "Predictions made using a CNN(infections only) as implemented with loss function MAE."
    )
  print(p2)
  
 
}
```

# Running the Model

```{r}
#| label: Main execution function
main <- function() {
  # Simulate data
  simulate_data()
  
  # Prepare data sets
  data_sets <- prepare_data_sets()
  train <- data_sets$train
  test <- data_sets$test
  theta <- data_sets$theta
  arrays_1d <- data_sets$arrays_1d
  N <- data_sets$N
  N_train <- data_sets$N_train
  
  # Build and train the model
  model_results <- build_and_train_model(train, test, arrays_1d, theta, N_train)
  pred <- model_results$pred
  MAEs <- model_results$MAEs
  
  # Visualize results
  print(visualize_results(pred, test, theta, MAEs, N, N_train))
}

# Run the main function
main()
```
